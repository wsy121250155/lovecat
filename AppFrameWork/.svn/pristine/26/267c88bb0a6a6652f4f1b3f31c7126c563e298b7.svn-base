package com.mobile.base.http;

import com.mobile.api.proto.MAppChat.MChatList;
import com.mobile.api.proto.MAppNews.MNewsList;
import com.mobile.api.proto.MAppNews.MRssList;
import com.mobile.api.proto.MAppTreeHole.MCommentList;
import com.mobile.api.proto.MAppTreeHole.MMsgCount;
import com.mobile.api.proto.MAppTreeHole.MTagList;
import com.mobile.api.proto.MAppTreeHole.MTopic;
import com.mobile.api.proto.MAppTreeHole.MTopicMini;
import com.mobile.api.proto.MAppTreeHole.MTreeHole;
import com.mobile.api.proto.MSystem.MClassList;





import com.mobile.api.proto.MSystem.MRet;
import com.mobile.base.model.Bean2Json;

import com.mobile.api.proto.MSystem.MRet;


import android.content.Context;

public class ApiClientFactory {
	/*
	 * 获取新闻列表
	 */
	public static void getNewsListApi(Context context, Object controller, String methodName, int page, int limit) {
		ParamsFormat pf = ParamsFormatFactory.getParamsFormat("MNewsList", page, limit);
		MNewsList list = new MNewsList(); 
		
		ApiClient.getApiData(context, controller, methodName, pf, list);
	}
	
	public static void getScheduleApi(Context context, Object controller, String methodName, String account, String password ,String code) {
		ParamsFormat pf = ParamsFormatFactory.getParamsFormat("MSchedule");
		pf.addParam("account", account);
		pf.addParam("password", password);
		pf.addParam("code", code);
		MClassList list = new MClassList();
		
		
		ApiClient.getApiData(context, controller, methodName, pf, list);
		
	}
	
	/*
	 * 获取订阅列表
	 */
	public static void getRssList(Context context,Object controller,String methodName,int page ,int limit){		
		ParamsFormat pf=ParamsFormatFactory.getParamsFormat("MAllRss",page,limit);
		MRssList list=new MRssList();
		
		ApiClient.getApiData(context, controller, methodName, pf, list);
	}
	/*
	 * 获取订阅的新闻列表
	 */
	public static void getMRssNews(Context context,Object controller,String methodName,String rssid,int page,int limit){		
		ParamsFormat pf=ParamsFormatFactory.getParamsFormat("MRssNews",page,limit);
		pf.addParam("rssid", rssid);
		MNewsList list=new MNewsList();
		
		ApiClient.getApiData(context, controller, methodName, pf, list);
	}

	/*
	 * 我的订阅
	 */
	public static void getMyRss(Context context,Object controller,String methodName,int page,int limit) {
		ParamsFormat pf=ParamsFormatFactory.getParamsFormat("MMyRss",page,limit);
		MRssList list=new MRssList();
		
		ApiClient.getApiData(context, controller, methodName, pf, list);
	}

	/*
	 * 树洞首页列表
	 */
	public static void getTreeHoleList(Context context, Object controller, String methodName, int type, int page, int limit){
		ParamsFormat pf = ParamsFormatFactory.getParamsFormat("MTreeHoleList", page, limit);
		MTreeHole list = new MTreeHole();
		
		pf.addParam("type", type);
		
		ApiClient.getApiData(context, controller, methodName, pf, list);
	}
	/*
	 *树洞话题列表 
	 */
	public static void getTopicList(Context context, Object controller, String methodName){
		ParamsFormat pf = ParamsFormatFactory.getParamsFormat("MGetTags");
		MTagList list = new MTagList();
		
		ApiClient.getApiData(context, controller, methodName, pf, list);
	}
	
	/*
	 * 带话题树洞首页列表
	 */
	public static void getTTreeHoleList(Context context, Object controller, String methodName, int type, int page, int limit, String tag){
		ParamsFormat pf = ParamsFormatFactory.getParamsFormat("MTreeHoleList", page, limit);
		MTreeHole list = new MTreeHole();
		
		pf.addParam("type", type);
		pf.addParam("tagId", tag);
		
		ApiClient.getApiData(context, controller, methodName, pf, list);
	}
	
	/*
	 * 获取树洞的评论列表
	 */
	public static void getComments(Context context, Object controller, String methodName, int page, int limit, String id){
		ParamsFormat pf = ParamsFormatFactory.getParamsFormat("MTreeHoleComments", page, limit);
		MCommentList list =  new MCommentList();
		
		pf.addParam("id", id);
		
		ApiClient.getApiData(context, controller, methodName, pf, list);
	}
	/*
	 * 树赞点赞
	 */
	 public static void treeHolePraise(Context context, Object controller, String methodName, String id, int type){
		 ParamsFormat pf = ParamsFormatFactory.getParamsFormat("MPraise");
		 
		 MRet ret = new MRet();
		 
		 pf.addParam("id", id);
		 pf.addParam("type", type);
		 
		 ApiClient.getApiData(context, controller, methodName, pf, ret);
	 }
	 /*
	  * 树洞发布评论
	  */
	 public static void announceComments(Context context, Object controller, String methodName,
			 String id, String content, int isLZ, String replyId, int replyFloor){
		 ParamsFormat pf = ParamsFormatFactory.getParamsFormat("MTreeHoleComment");
		 
		 MRet ret = new MRet();
		 
		 pf.addParam("id", id);
		 pf.addParam("content", content);
		 pf.addParam("isLz", isLZ);
		 pf.addParam("replyid", replyId);
		 pf.addParam("replyFloor", replyFloor);
		 
		 ApiClient.getApiData(context, controller, methodName, pf, ret);
	 }
	 /*
	  * 个人信息页面树洞列表
	  */
	 public static void personTreeHole(Context context, Object controller, String methodName){
		 ParamsFormat pf = ParamsFormatFactory.getParamsFormat("MTreeHoleNewComment");
		 
		 MTopicMini topic = new MTopicMini();
		 
		 ApiClient.getApiData(context, controller, methodName, pf, topic);
	 }
	 /*
	  * 个人私信首页
	  */
	 public static void personChatList(Context context, Object controller, String methodName){
		 ParamsFormat pf = ParamsFormatFactory.getParamsFormat("MChatIndex");
		 
		 MChatList chatList = new MChatList();
		 
		 ApiClient.getApiData(context, controller, methodName, pf, chatList);
	 }
	 /*
	  * 个人私信纪录删除
	  */
	 public static void delChat(Context context, Object controller, String methodName, String id){
		 ParamsFormat pf = ParamsFormatFactory.getParamsFormat("MChatDel");
		 

	 }
	 /*
	  * 私信加入黑名单
	  */
	 public static void blackChat(Context context, Object controller,String methodName, String id){
		 ParamsFormat pf = ParamsFormatFactory.getParamsFormat("MChatBlack");
		 
		 MRet ret = new MRet();
		 
		 pf.addParam("id", id);
		 
		 ApiClient.getApiData(context, controller, methodName, pf, ret);
	 }
	 /*
	  * 获取新消息数目
	  */
	 public static void getUnRead(Context context, Object controller,String methodName){
		 ParamsFormat pf = ParamsFormatFactory.getParamsFormat("MGetMsgCount");
		 
		 MMsgCount count = new MMsgCount();
		 
		 ApiClient.getApiData(context, controller, methodName, pf, count);
	 }
	 /*
	  * 树洞举报
	  */
	 public static void reportTreeHole(Context context, Object controller, String methodName, String id){
		ParamsFormat pf = ParamsFormatFactory.getParamsFormat("MTreeHoleReport");
		
		MRet ret = new MRet();
		
		pf.addParam("id", id);
		
		ApiClient.getApiData(context, controller, methodName, pf, ret);
	 }
	 /*
	  * 树洞发布
	  */
	 public static void addTreeHole(Context context, Object controller, String methodName,
			 String content, String tagid, String tagTitle, String img){
		 ParamsFormat pf = ParamsFormatFactory.getParamsFormat("MAddTreeHole");
		 
		 MRet ret = new MRet();
		 
		 pf.addParam("content", content);
		 pf.addParam("tagId", tagid);
		 pf.addParam("tagTitle", tagTitle);
		 pf.addParam("img", img);
		 
		 ApiClient.getApiData(context, controller, methodName, pf, ret);
	 }
	 /*
	  * 图片上传
	  */
	 public static void updatePhoto(Context context, Object controller,String methodName, String img){
		 ParamsFormat pf = ParamsFormatFactory.getParamsFormat("MImgUpload");
		 
		 pf.addParam("img", img);
		 
		 MRet ret = new MRet(); 
		 
		 ApiClient.getApiData(context, controller, methodName, pf, ret);
	 }

	
	public static void getWeeks(Context context,Object controller,String methodName) {
		ParamsFormat pf=ParamsFormatFactory.getParamsFormat("MWeek");
		MRet ret = new MRet();
		
		ApiClient.getApiData(context, controller, methodName, pf, ret);
	}

}
